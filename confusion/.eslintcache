[{"D:\\courses\\react\\confusion\\src\\App.js":"1","D:\\Courses\\React\\confusion\\src\\reportWebVitals.js":"2","D:\\Courses\\React\\confusion\\src\\index.js":"3","D:\\Courses\\React\\confusion\\src\\App.js":"4","D:\\Courses\\React\\confusion\\src\\shared\\dishes.js":"5","D:\\Courses\\React\\confusion\\src\\components\\DishdetailComponent.js":"6","D:\\Courses\\React\\confusion\\src\\components\\MainComponent.js":"7","D:\\Courses\\React\\confusion\\src\\components\\MenuComponent.js":"8","D:\\Courses\\React\\confusion\\src\\components\\HeaderComponent.js":"9","D:\\Courses\\React\\confusion\\src\\components\\HomeComponent.js":"10","D:\\Courses\\React\\confusion\\src\\shared\\leaders.js":"11","D:\\Courses\\React\\confusion\\src\\components\\ContactComponent.js":"12","D:\\Courses\\React\\confusion\\src\\shared\\promotions.js":"13","D:\\Courses\\React\\confusion\\src\\components\\AboutComponent.js":"14","D:\\Courses\\React\\confusion\\src\\shared\\comments.js":"15","D:\\Courses\\React\\confusion\\src\\redux\\configureStore.js":"16","D:\\Courses\\React\\confusion\\src\\redux\\dishes.js":"17","D:\\Courses\\React\\confusion\\src\\redux\\comments.js":"18","D:\\Courses\\React\\confusion\\src\\components\\FooterComponent.js":"19","D:\\Courses\\React\\confusion\\src\\redux\\promotions.js":"20","D:\\Courses\\React\\confusion\\src\\redux\\leaders.js":"21","D:\\Courses\\React\\confusion\\src\\redux\\ActionTypes.js":"22","D:\\Courses\\React\\confusion\\src\\redux\\ActionCreators.js":"23","D:\\Courses\\React\\confusion\\src\\components\\LoadingComponent.js":"24","D:\\Courses\\React\\confusion\\src\\redux\\forms.js":"25","D:\\Courses\\React\\confusion\\src\\shared\\baseUrl.js":"26"},{"size":528,"mtime":1609089578949,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":1609089578949,"results":"29","hashOfConfig":"30"},{"size":639,"mtime":1610100239293,"results":"31","hashOfConfig":"30"},{"size":578,"mtime":1611927736161,"results":"32","hashOfConfig":"30"},{"size":1490,"mtime":1610126990642,"results":"33","hashOfConfig":"30"},{"size":7948,"mtime":1614086919761,"results":"34","hashOfConfig":"30"},{"size":3290,"mtime":1614087302086,"results":"35","hashOfConfig":"30"},{"size":2099,"mtime":1614093907763,"results":"36","hashOfConfig":"30"},{"size":5189,"mtime":1611336684158,"results":"37","hashOfConfig":"30"},{"size":1589,"mtime":1614087039687,"results":"38","hashOfConfig":"30"},{"size":2382,"mtime":1610127050414,"results":"39","hashOfConfig":"30"},{"size":10993,"mtime":1614010993175,"results":"40","hashOfConfig":"30"},{"size":445,"mtime":1610127034434,"results":"41","hashOfConfig":"30"},{"size":4378,"mtime":1610471420704,"results":"42","hashOfConfig":"30"},{"size":4280,"mtime":1610127005231,"results":"43","hashOfConfig":"30"},{"size":788,"mtime":1614010833298,"results":"44","hashOfConfig":"30"},{"size":598,"mtime":1613993262792,"results":"45","hashOfConfig":"30"},{"size":634,"mtime":1614085219624,"results":"46","hashOfConfig":"30"},{"size":2639,"mtime":1610118384689,"results":"47","hashOfConfig":"30"},{"size":683,"mtime":1614085233928,"results":"48","hashOfConfig":"30"},{"size":179,"mtime":1612026121433,"results":"49","hashOfConfig":"30"},{"size":411,"mtime":1614084648444,"results":"50","hashOfConfig":"30"},{"size":3176,"mtime":1614349600936,"results":"51","hashOfConfig":"30"},{"size":268,"mtime":1614000811081,"results":"52","hashOfConfig":"30"},{"size":170,"mtime":1614010774885,"results":"53","hashOfConfig":"30"},{"size":48,"mtime":1614094665140,"results":"54","hashOfConfig":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"tqobii",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"187bo",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"61"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\courses\\react\\confusion\\src\\App.js",[],"D:\\Courses\\React\\confusion\\src\\reportWebVitals.js",[],"D:\\Courses\\React\\confusion\\src\\index.js",[],["116","117"],"D:\\Courses\\React\\confusion\\src\\App.js",["118"],"import logo from './logo.svg';\nimport React, {Component} from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\n\nconst store = ConfigureStore();\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className=\"App\">\n            <Main />\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","D:\\Courses\\React\\confusion\\src\\shared\\dishes.js",[],["119","120"],"D:\\Courses\\React\\confusion\\src\\components\\DishdetailComponent.js",["121","122","123","124"],"import React,{Component} from 'react';\r\nimport { Card, CardImg, CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Row, Col, Label } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nimport { baseUrl } from '../shared/baseUrl';\r\n\r\n    function RenderDish({dish}){\r\n        \r\n        if(dish !=null){\r\n            return(\r\n            <div className=\"col-12 col-md-5 m-1\">\r\n            <Card>\r\n               <CardImg top src={baseUrl + dish.image} alt={dish.name} />\r\n               <CardBody>\r\n               <CardTitle>{dish.name}</CardTitle>\r\n               <CardText>{dish.description}</CardText>\r\n               </CardBody>\r\n            </Card>\r\n            </div>\r\n            );\r\n        }\r\n        else{\r\n            return(\r\n                <div></div>\r\n              );\r\n        }\r\n    }     \r\n\r\n    function RenderComments({comments, addComment, dishId}) {\r\n        if(comments==null){\r\n            return(\r\n               <div></div>\r\n            );\r\n        }\r\n       const com=comments.map(comment => {\r\n          return(\r\n              <li key={comment.id}>\r\n                <br/>\r\n               {comment.comment}\r\n                <br/> <br/>\r\n                --{comment.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))} <br/>\r\n              </li>\r\n\r\n          );\r\n       });\r\n        return(\r\n              <div className=\"col-12 col-md-5 m-1\">\r\n                <h4>Comments</h4>\r\n                <ul className=\"list-unstyled\">\r\n                    {com}\r\n                </ul>\r\n                <CommentForm dishId={dishId} addComment={addComment} />\r\n                {/* <Button outline color=\"secondary\"><span className=\"fa fa-pencil fa-lg\"></span> Submit Comment</Button>{' '} */}\r\n              </div>\r\n        )\r\n        }\r\n      const DishDetail = (props)=>{\r\n           const dish=props.dish\r\n           if (props.isLoading) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <Loading />\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.errMess) {\r\n            return(\r\n                <div className=\"container\">\r\n                    <div className=\"row\">            \r\n                        <h4>{props.errMess}</h4>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else if (props.dish == null)\r\n               {return(\r\n                   <div></div>\r\n               );\r\n           }\r\n           return(\r\n               <div className=\"container\">\r\n                   <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>{props.dish.name}</h3>\r\n                        <hr />\r\n                    </div>                \r\n                    </div>\r\n                <div className=\"row\">\r\n                    <RenderDish dish={props.dish} />\r\n                    <RenderComments comments={props.comments}\r\n                     addComment={props.addComment}\r\n                     dishId={props.dish.id}\r\n                    />\r\n                </div>\r\n                </div>\r\n           );\r\n           }\r\n      \r\n\r\n\r\n  export default DishDetail; \r\n\r\n  const required = (val) => val && val.length;\r\n  const maxLength = (len) => (val) => !(val) || (val.length <= len);\r\n  const minLength = (len) => (val) => val && (val.length >= len);\r\n  \r\n  class CommentForm extends Component {\r\n      constructor(props) {\r\n          super(props);\r\n  \r\n          this.state = {\r\n              isModalOpen: false\r\n          };\r\n  \r\n          this.toggleModal = this.toggleModal.bind(this);\r\n          this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n  \r\n      toggleModal() {\r\n          this.setState({ isModalOpen: !this.state.isModalOpen });\r\n      }\r\n  \r\n      handleSubmit(values) {\r\n          this.toggleModal();\r\n          this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n\r\n        //   console.log('Current State is: ' + JSON.stringify(values));\r\n        //  alert('Current State is: ' + JSON.stringify(values));\r\n    }\r\n  \r\n      render() {\r\n          return (\r\n              <div>\r\n                  <Button outline onClick={this.toggleModal}>\r\n                      <span className=\"fa fa-pencil fa-lg\"> Submit comment</span>\r\n                  </Button>\r\n  \r\n                  <div className=\"row row-content\">\r\n                      <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n                          <ModalHeader toggle={this.toggleModal}> Submit comment</ModalHeader>\r\n                          <ModalBody>\r\n                              <div className=\"col-12 col-md-9\">\r\n                                  <LocalForm onSubmit={(values) => this.handleSubmit(values)} >\r\n                                      <Row className=\"form-group\">\r\n                                          <Label htmlFor=\"rating\">Rating</Label>\r\n                                          <Col md={10}>\r\n                                              <Control.select model=\".rating\" name=\"rating\" className=\"form-control\" >\r\n                                                  <option>1</option>\r\n                                                  <option>2</option>\r\n                                                  <option>3</option>\r\n                                                  <option>4</option>\r\n                                                  <option>5</option>\r\n                                              </Control.select>\r\n                                          </Col>\r\n                                      </Row>\r\n  \r\n                                      <Row className=\"form-group\">\r\n                                          <Label htmlFor=\"author\" md={2}>Your name</Label>\r\n                                          <Col md={10}>\r\n                                              <Control.text model=\".author\" id=\"author\" name=\"author\" placeholder=\"Author\" className=\"form-control\" validators={{ required, minLength: minLength(3), maxLength: maxLength(15) }} />\r\n                                              <Errors className=\"text-danger\" model=\".author\" show=\"touched\" messages={{ required: 'Required', minLength: 'Must be greater than 3 characters', maxLength: 'Must be 15 charaters or less' }} />\r\n                                          </Col>\r\n                                      </Row>\r\n  \r\n                                      <Row className=\"form-group\">\r\n                                          <Label htmlFor=\"feedback\" md={2}>Your feedback</Label>\r\n                                          <Col md={10}>\r\n                                              <Control.textarea model=\".comment\" id=\"comment\" name=\"comment\" rows=\"6\" className=\"form-control\" validators={{ required }} />\r\n                                              <Errors className=\"text-danger\" model=\".comment\" show=\"touched\" messages={{ required: 'Required' }} />\r\n                                          </Col>\r\n                                      </Row>\r\n  \r\n                                      <Button type=\"submit\" value=\"submit\" color=\"primary\">Submit</Button>\r\n                                  </LocalForm>\r\n                              </div>\r\n                          </ModalBody>\r\n                      </Modal>\r\n                  </div>\r\n              </div>\r\n          );\r\n      }\r\n  }\r\n\r\n  export {CommentForm}; \r\n",["125","126"],"D:\\Courses\\React\\confusion\\src\\components\\MainComponent.js",["127"],"import React, { Component } from 'react';\r\nimport Home from './HomeComponent';\r\nimport Menu from './MenuComponent';\r\nimport DishDetail from './DishdetailComponent';\r\nimport Contact from './ContactComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport Aboutus from './AboutComponent';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchDishes, fetchComments, fetchPromos } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\n\r\n\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  };\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n  fetchDishes: () => { dispatch(fetchDishes())},\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))},\r\n  fetchComments: () => { dispatch(fetchComments())},\r\n  fetchPromos: () => { dispatch(fetchPromos())}\r\n});\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n  }\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n    this.props.fetchComments();\r\n    this.props.fetchPromos();\r\n  }\r\n  \r\n\r\n  onDishSelect(dishId) {\r\n    this.setState({ selectedDish: dishId});\r\n  }\r\n\r\n  render() {\r\n    const HomePage = () => {\r\n      return(\r\n          <Home \r\n          dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n          dishesLoading={this.props.dishes.isLoading}\r\n          dishErrMess={this.props.dishes.errMess}\r\n          promotion={this.props.promotions.promotions.filter((promo) => promo.featured)[0]}\r\n          promoLoading={this.props.promotions.isLoading}\r\n          promoErrMess={this.props.promotions.errMess}\r\n          leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n         />\r\n      );\r\n    }\r\n\r\n    const DishWithId = ({match}) => {\r\n      return(\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId,10))[0]}\r\n        isLoading={this.props.dishes.isLoading}\r\n        errMess={this.props.dishes.errMess}\r\n        comments={this.props.comments.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId,10))}\r\n        commentsErrMess={this.props.comments.errMess}\r\n        addComment={this.props.addComment}\r\n      />\r\n      );\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <div>\r\n          <Switch>\r\n              <Route path='/home' component={HomePage} />\r\n              <Route exact path='/aboutus' component={() => <Aboutus leaders={this.props.leaders} />} />\r\n              <Route exact path='/menu' component={() => <Menu dishes={this.props.dishes} />} />\r\n              <Route path='/menu/:dishId' component={DishWithId} />\r\n              <Route exact path='/contactus' component={() => <Contact resetFeedbackForm={this.props.resetFeedbackForm} />} />\r\n              <Redirect to=\"/home\" />\r\n          </Switch>\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","D:\\Courses\\React\\confusion\\src\\components\\MenuComponent.js",[],"D:\\Courses\\React\\confusion\\src\\components\\HeaderComponent.js",[],"D:\\Courses\\React\\confusion\\src\\components\\HomeComponent.js",[],"D:\\Courses\\React\\confusion\\src\\shared\\leaders.js",[],["128","129"],"D:\\Courses\\React\\confusion\\src\\components\\ContactComponent.js",["130","131","132","133","134","135","136","137","138"],"import React, {Component} from 'react';\r\nimport { Breadcrumb, BreadcrumbItem,\r\n    Button, Row, Col, Label } from 'reactstrap';\r\n    import { Control, Form, Errors, actions } from 'react-redux-form';\r\n    import { Link } from 'react-router-dom';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\nclass Contact extends Component {\r\n        constructor(props) {\r\n            super(props);\r\n    \r\n            this.handleSubmit = this.handleSubmit.bind(this);\r\n        }\r\n    \r\n        handleSubmit(values) {\r\n            console.log('Current State is: ' + JSON.stringify(values));\r\n            alert('Current State is: ' + JSON.stringify(values));\r\n            this.props.resetFeedbackForm();\r\n        }\r\n\r\n        \r\n\r\n        render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <Breadcrumb>\r\n                        <BreadcrumbItem><Link to=\"/home\">Home</Link></BreadcrumbItem>\r\n                        <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n                    </Breadcrumb>\r\n                    <div className=\"col-12\">\r\n                        <h3>Contact Us</h3>\r\n                        <hr />\r\n                    </div>                \r\n                </div>\r\n                <div className=\"row row-content\">\r\n                    <div className=\"col-12\">\r\n                    <h3>Location Information</h3>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n                            <h5>Our Address</h5>\r\n                            <address>\r\n                            121, Clear Water Bay Road<br />\r\n                            Clear Water Bay, Kowloon<br />\r\n                            HONG KONG<br />\r\n                            <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n                            <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n                            <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n                            </address>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n                        <h5>Map of our Location</h5>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n                        <div className=\"btn-group\" role=\"group\">\r\n                            <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n                            <a role=\"button\" className=\"btn btn-info\"><i className=\"fa fa-skype\"></i> Skype</a>\r\n                            <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row row-content\">\r\n                   <div className=\"col-12\">\r\n                      <h3>Send us your Feedback</h3>\r\n                   </div>\r\n                    <div className=\"col-12 col-md-9\">\r\n                    <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n                    <Row className=\"form-group\">\r\n                                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".firstname\" id=\"firstname\" name=\"firstname\"\r\n                                        placeholder=\"First Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".firstname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".lastname\" id=\"lastname\" name=\"lastname\"\r\n                                        placeholder=\"Last Name\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15)\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".lastname\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 characters',\r\n                                            maxLength: 'Must be 15 characters or less'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".telnum\" id=\"telnum\" name=\"telnum\"\r\n                                        placeholder=\"Tel. Number\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, minLength: minLength(3), maxLength: maxLength(15), isNumber\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".telnum\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            minLength: 'Must be greater than 2 numbers',\r\n                                            maxLength: 'Must be 15 numbers or less',\r\n                                            isNumber: 'Must be a number'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".email\" id=\"email\" name=\"email\"\r\n                                        placeholder=\"Email\"\r\n                                        className=\"form-control\"\r\n                                        validators={{\r\n                                            required, validEmail\r\n                                        }}\r\n                                         />\r\n                                    <Errors\r\n                                        className=\"text-danger\"\r\n                                        model=\".email\"\r\n                                        show=\"touched\"\r\n                                        messages={{\r\n                                            required: 'Required',\r\n                                            validEmail: 'Invalid Email Address'\r\n                                        }}\r\n                                     />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size: 6, offset: 2}}>\r\n                                    <div className=\"form-check\">\r\n                                        <Label check>\r\n                                            <Control.checkbox model=\".agree\" name=\"agree\"\r\n                                                className=\"form-check-input\"\r\n                                                 /> {' '}\r\n                                                <strong>May we contact you?</strong>\r\n                                        </Label>\r\n                                    </div>\r\n                                </Col>\r\n                                <Col md={{size: 3, offset: 1}}>\r\n                                    <Control.select model=\".contactType\" name=\"contactType\"\r\n                                        className=\"form-control\">\r\n                                        <option>Tel.</option>\r\n                                        <option>Email</option>\r\n                                    </Control.select>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                                <Col md={10}>\r\n                                    <Control.textarea model=\".message\" id=\"message\" name=\"message\"\r\n                                        rows=\"12\"\r\n                                        className=\"form-control\" />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"form-group\">\r\n                                <Col md={{size:10, offset: 2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                    Send Feedback\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Form>\r\n                    </div>\r\n               </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Contact;","D:\\Courses\\React\\confusion\\src\\shared\\promotions.js",[],"D:\\Courses\\React\\confusion\\src\\components\\AboutComponent.js",[],"D:\\Courses\\React\\confusion\\src\\shared\\comments.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\configureStore.js",[],["139","140"],"D:\\Courses\\React\\confusion\\src\\redux\\dishes.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\comments.js",[],"D:\\Courses\\React\\confusion\\src\\components\\FooterComponent.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\promotions.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\leaders.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\ActionTypes.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\ActionCreators.js",["141"],"D:\\Courses\\React\\confusion\\src\\components\\LoadingComponent.js",[],"D:\\Courses\\React\\confusion\\src\\redux\\forms.js",[],"D:\\Courses\\React\\confusion\\src\\shared\\baseUrl.js",[],{"ruleId":"142","replacedBy":"143"},{"ruleId":"144","replacedBy":"145"},{"ruleId":"146","severity":1,"message":"147","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":12},{"ruleId":"142","replacedBy":"150"},{"ruleId":"144","replacedBy":"151"},{"ruleId":"146","severity":1,"message":"152","line":60,"column":18,"nodeType":"148","messageId":"149","endLine":60,"endColumn":22},{"ruleId":"153","severity":1,"message":"154","line":155,"column":47,"nodeType":"155","endLine":155,"endColumn":119},{"ruleId":"153","severity":1,"message":"156","line":168,"column":47,"nodeType":"155","endLine":168,"endColumn":228},{"ruleId":"153","severity":1,"message":"157","line":176,"column":47,"nodeType":"155","endLine":176,"endColumn":172},{"ruleId":"142","replacedBy":"158"},{"ruleId":"144","replacedBy":"159"},{"ruleId":"160","severity":1,"message":"161","line":35,"column":3,"nodeType":"162","messageId":"163","endLine":38,"endColumn":4},{"ruleId":"142","replacedBy":"164"},{"ruleId":"144","replacedBy":"165"},{"ruleId":"146","severity":1,"message":"166","line":4,"column":37,"nodeType":"148","messageId":"149","endLine":4,"endColumn":44},{"ruleId":"167","severity":1,"message":"168","line":62,"column":29,"nodeType":"155","endLine":62,"endColumn":71},{"ruleId":"153","severity":1,"message":"156","line":76,"column":37,"nodeType":"155","endLine":82,"endColumn":44},{"ruleId":"153","severity":1,"message":"156","line":98,"column":37,"nodeType":"155","endLine":104,"endColumn":44},{"ruleId":"153","severity":1,"message":"156","line":120,"column":37,"nodeType":"155","endLine":126,"endColumn":44},{"ruleId":"153","severity":1,"message":"156","line":143,"column":37,"nodeType":"155","endLine":149,"endColumn":44},{"ruleId":"153","severity":1,"message":"169","line":165,"column":45,"nodeType":"155","endLine":167,"endColumn":52},{"ruleId":"153","severity":1,"message":"154","line":173,"column":37,"nodeType":"155","endLine":174,"endColumn":66},{"ruleId":"153","severity":1,"message":"157","line":183,"column":37,"nodeType":"155","endLine":185,"endColumn":68},{"ruleId":"142","replacedBy":"170"},{"ruleId":"144","replacedBy":"171"},{"ruleId":"146","severity":1,"message":"172","line":2,"column":10,"nodeType":"148","messageId":"149","endLine":2,"endColumn":16},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["173"],["174"],"'dish' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE",["173"],["174"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["173"],["174"],"'actions' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["173"],["174"],"'DISHES' is defined but never used.","no-global-assign","no-unsafe-negation"]